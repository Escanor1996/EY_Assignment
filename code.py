# -*- coding: utf-8 -*-
"""Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fneP08oh3bL9RX0cntWSQrBKn_ObuYZ2
"""



"""importing necessary libraries"""

# %matplotlib inline
# %config InlineBackend.figure_format = 'retina'

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

import torch
from torch import nn
from torch import optim
import torch.nn.functional as F
from torchvision import datasets, transforms, models

train.head()

train=pd.read_excel('train.xlsx')
train.head()
train.count()

train=train.drop("Sales",axis=1)

train_label=pd.DataFrame()
train_label['Sales']=train['Sales'].values

train_label.head()

test=pd.read_excel('test.xlsx')
test.head()

for x in ['SKU','Season']:
  test=test.drop(x,axis=1)

test_label=pd.DataFrame()
test_label['Sales']=test['Sales'].values

test.head()

test=test.drop('Sales',axis=1)

test.count()

test_label.head()

test=test.drop('Sales', axis=1)

model=nn.Sequential(nn.Linear(8,4),nn.ReLU(),nn.Linear(4,1))

train_input=train.values
train_target=train_label.values

train_input=torch.from_numpy(train_input)
train_target=torch.from_numpy(train_target)

train_input=train_input.float()
train_target=train_target.float()

criterion=nn.MSELoss()
optimizer=optim.Adam(model.parameters(),lr=0.1)

dataset=[(train_input,train_target)]

for i in range(1000):
  for inputs,labels in dataset:
    
    optimizer.zero_grad()
    output=model(inputs)
    loss=criterion(output,labels)
    loss.backward()
    optimizer.step()

loss.item()/82

test_input=torch.from_numpy(test.values).float()

result=model(test_input)

result

result_output=result.detach().numpy()

result_df=pd.DataFrame(result_output)
result_df.head()

result_df.to_excel("output.xlsx")









